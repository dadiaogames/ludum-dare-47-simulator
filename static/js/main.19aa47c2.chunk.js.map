{"version":3,"sources":["Dialog.js","App.js","serviceWorker.js","index.js"],"names":["Dialog","props","className","align","content","onClick","next","TitleScreen","play","App","dialogs","useState","idx","setIdx","x","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAKO,SAASA,EAAOC,GACrB,OAAO,yBAAKC,UAAU,QAAQC,MAAM,UAClC,uBAAGD,UAAU,UAAUD,EAAMG,SAE7B,4BAAQF,UAAU,cAAcG,QAASJ,EAAMK,MAA/C,SCLJ,SAASC,EAAYN,GACnB,OACE,yBAAKC,UAAU,QAAQC,MAAM,UAC3B,wBAAID,UAAU,SAAd,2BACA,4BAAQA,UAAU,cAAcG,QAASJ,EAAMO,MAA/C,mBA+BSC,MA1Bf,WACE,IAAMC,EAAU,CACd,gFACA,gJACA,8CACA,+BACA,oDACA,2BACA,gLACA,iEACA,mCAVW,EAYOC,oBAAU,GAZjB,mBAYRC,EAZQ,KAYHC,EAZG,KAiBb,OAAY,GAARD,EACK,kBAACL,EAAD,CAAaC,KAJX,kBAAMK,EAAO,MAOf,kBAAC,EAAD,CAAQT,QAASM,EAAQE,GAAMN,KAN7B,kBAAMO,GAAO,SAAAC,GAAC,OAAKA,EAAIJ,EAAQK,OAAO,EAAGD,EAAE,GAAG,SChBvCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.19aa47c2.chunk.js","sourcesContent":["import React from 'react';\n\nimport \"./Board.css\";\nimport \"./Dialog.css\";\n\nexport function Dialog(props) {\n  return <div className=\"board\" align=\"center\">\n    <p className=\"dialog\">{props.content}</p>\n    {/* TODO: change this into better version of \"dialog\" */}\n    <button className=\"next-button\" onClick={props.next}>Next</button>\n  </div>;\n}","import React, { useState } from 'react';\nimport './Board.css';\nimport { Dialog } from './Dialog';\n\nfunction TitleScreen(props) {\n  return (\n    <div className=\"board\" align=\"center\">\n      <h1 className=\"title\">Ludum Dare 47 Simulator</h1>\n      <button className=\"play-button\" onClick={props.play}>Play this s**t</button>\n    </div>\n  );\n}\n\nfunction App() {\n  const dialogs = [\n    \"Hi There, I am a game developer, and I am now participating in Ludum Dare 47.\",\n    \"It's a game event where games are made from scratch in a weekend. A theme is designated every time and all games should be around that theme.\",\n    \"Let me look at what this time's theme is...\",\n    \"Oh, it's \\\"Stuck in a loop\\\".\",\n    \"It's such a hard theme, let me grab some ideas...\",\n    \"Oh, I got a awesome one!\",\n    \"I gonna make a game about a game developer participating a game jam called \\\"ludum dare\\\" and the theme is \\\"stuck in a loop\\\", and this game is about him/her making the game...\",\n    \"And let's dive in! [Working, working, working], it's finished!\",\n    \"Here the game is, check it out:\",\n  ];\n  let [idx, setIdx] = useState(-1);\n\n  let play = () => setIdx(0);\n  let next = () => setIdx(x => (x < dialogs.length-1)?x+1:-1);\n    \n  if (idx == -1) {\n    return <TitleScreen play={play} />\n  } \n  else {\n    return <Dialog content={dialogs[idx]} next={next} />\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}